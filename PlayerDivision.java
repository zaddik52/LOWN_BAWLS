import java.util.HashMap;
import java.util.Map;

public class PlayerDivision {

    // הטבלה כקבוע בתוך הקוד
    private static final Map<Integer, Map<Integer, String>> DIVISION_TABLE = new HashMap<>();

    static {
        // אתחול הטבלה
        addRow(4, "4", "0,4", "0,0,4", "0,0,0,4", "0,0,0,0,4", "0,0,0,0,0,4", "0,0,0,0,0,0,4");
        addRow(5, "5", "0,5", "0,0,5", "0,0,0,5", "0,0,0,0,5", "0,0,0,0,0,5", "0,0,0,0,0,0,5");
        addRow(6, "6", "0,6", "0,0,6", "0,0,0,6", "0,0,0,0,6", "0,0,0,0,0,6", "0,0,0,0,0,0,6");
        addRow(7, "7", "0,7", "0,0,7", "0,0,0,7", "0,0,0,0,7", "0,0,0,0,0,7", "0,0,0,0,0,0,7");
        addRow(8, "8", "4,4", "0,4,4", "0,0,4,4", "0,0,0,4,4", "0,0,0,0,4,4", "0,0,0,0,0,4,4");
        addRow(9, "", "4,5", "0,4,5", "0,0,4,5", "0,0,0,4,5", "0,0,0,0,4,5", "0,0,0,0,0,4,5");
        addRow(10, "", "4,6", "0,4,6", "0,0,4,6", "0,0,0,4,6", "0,0,0,0,4,6", "0,0,0,0,0,4,6");
        addRow(11, "", "5,6", "0,5,6", "0,0,5,6", "0,0,0,5,6", "0,0,0,0,5,6", "0,0,0,0,0,5,6");
        addRow(12, "", "6,6", "0,6,6", "0,0,6,6", "0,0,0,6,6", "0,0,0,0,6,6", "0,0,0,0,0,6,6");
        addRow(13, "", "6,7", "4,4,5", "0,4,4,5", "0,0,4,4,5", "0,0,0,4,4,5", "0,0,0,0,4,4,5");
        addRow(14, "", "6,8", "4,4,6", "0,4,4,6", "0,0,4,4,6", "0,0,0,4,4,6", "0,0,0,0,4,4,6");
        addRow(15, "", "7,8", "4,5,6", "0,4,5,6", "0,0,4,5,6", "0,0,0,4,5,6", "0,0,0,0,4,5,6");
        addRow(16, "", "8,8", "4,6,6", "0,4,6,6", "0,0,4,6,6", "0,0,0,4,6,6", "0,0,0,0,4,6,6");
        addRow(17, "", "", "5,6,6", "0,5,6,6", "0,0,5,6,6", "0,0,0,5,6,6", "0,0,0,0,5,6,6");
        addRow(18, "", "", "6,6,6", "0,6,6,6", "0,0,6,6,6", "0,0,0,6,6,6", "0,0,0,0,6,6,6");
        addRow(19, "", "", "6,6,7", "4,4,5,6", "0,4,4,5,6", "0,0,4,4,5,6", "0,0,0,4,4,5,6");
        addRow(20, "", "", "6,6,8", "4,4,6,6", "0,4,4,6,6", "0,0,4,4,6,6", "0,0,0,4,4,6,6");
        addRow(21, "", "", "6,7,8", "4,5,6,6", "0,4,5,6,6", "0,0,4,5,6,6", "0,0,0,4,5,6,6");
        addRow(22, "", "", "6,8,8", "4,6,6,6", "0,4,6,6,6", "0,0,4,6,6,6", "0,0,0,4,6,6,6");
        addRow(23, "", "", "7,8,8", "5,6,6,6", "0,5,6,6,6", "0,0,5,6,6,6", "0,0,0,5,6,6,6");
        addRow(24, "", "", "8,8,8", "6,6,6,6", "0,6,6,6,6", "0,0,6,6,6,6", "0,0,0,6,6,6,6");
        addRow(25, "", "", "", "6,6,6,7", "4,4,5,6,6", "0,4,4,5,6,6", "0,0,4,4,5,6,6");
        addRow(26, "", "", "", "6,6,6,8", "4,4,6,6,6", "0,4,4,6,6,6", "0,0,4,4,6,6,6");
        addRow(27, "", "", "", "6,6,7,8", "4,5,6,6,6", "0,4,5,6,6,6", "0,0,4,5,6,6,6");
        addRow(28, "", "", "", "6,6,8,8", "4,6,6,6,6", "0,4,6,6,6,6", "0,0,4,6,6,6,6");
        addRow(29, "", "", "", "6,7,8,8", "5,6,6,6,6", "0,5,6,6,6,6", "0,0,5,6,6,6,6");
        addRow(30, "", "", "", "6,8,8,8", "6,6,6,6,6", "0,6,6,6,6,6", "0,0,6,6,6,6,6");
        addRow(31, "", "", "", "7,8,8,8", "6,6,6,6,7", "4,4,5,6,6,6", "0,4,4,5,6,6,6");
        addRow(32, "", "", "", "8,8,8,8", "6,6,6,6,8", "4,4,6,6,6,6", "0,4,4,6,6,6,6");
        addRow(33, "", "", "", "", "6,6,6,7,8", "4,5,6,6,6,6", "0,4,5,6,6,6,6");
        addRow(34, "", "", "", "", "6,6,6,8,8", "4,6,6,6,6,6", "0,4,6,6,6,6,6");
        addRow(35, "", "", "", "", "6,6,7,8,8", "5,6,6,6,6,6", "0,5,6,6,6,6,6");
        addRow(36, "", "", "", "", "6,6,8,8,8", "6,6,6,6,6,6", "0,6,6,6,6,6,6");
        addRow(37, "", "", "", "", "6,7,8,8,8", "6,6,6,6,6,7", "4,4,5,6,6,6,6");
        addRow(38, "", "", "", "", "6,8,8,8,8", "6,6,6,6,6,8", "4,4,6,6,6,6,6");
        addRow(39, "", "", "", "", "7,8,8,8,8", "6,6,6,6,7,8", "4,5,6,6,6,6,6");
        addRow(40, "", "", "", "", "8,8,8,8,8", "6,6,6,6,8,8", "4,6,6,6,6,6,6");
        addRow(41, "", "", "", "", "", "6,6,6,7,8,8", "5,6,6,6,6,6,6");
        addRow(42, "", "", "", "", "", "6,6,6,8,8,8", "6,6,6,6,6,6,6");
        addRow(43, "", "", "", "", "", "6,6,7,8,8,8", "6,6,6,6,6,6,7");
        addRow(44, "", "", "", "", "", "6,6,8,8,8,8", "6,6,6,6,6,6,8");
        addRow(45, "", "", "", "", "", "6,7,8,8,8,8", "6,6,6,6,6,7,8");
        addRow(46, "", "", "", "", "", "6,8,8,8,8,8", "6,6,6,6,6,8,8");
        addRow(47, "", "", "", "", "", "7,8,8,8,8,8", "6,6,6,6,7,8,8");
        addRow(48, "", "", "", "", "", "8,8,8,8,8,8", "6,6,6,6,8,8,8");
        addRow(49, "", "", "", "", "", "", "6,6,6,7,8,8,8");
        addRow(50, "", "", "", "", "", "", "6,6,6,8,8,8,8");
        addRow(51, "", "", "", "", "", "", "6,6,7,8,8,8,8");
        addRow(52, "", "", "", "", "", "", "6,6,8,8,8,8,8");
        addRow(53, "", "", "", "", "", "", "6,7,8,8,8,8,8");
        addRow(54, "", "", "", "", "", "", "6,8,8,8,8,8,8");
        addRow(55, "", "", "", "", "", "", "7,8,8,8,8,8,8");
        addRow(56, "", "", "", "", "", "", "8,8,8,8,8,8,8");
    }

    // פונקציה עזר להוספת שורה לטבלה
    private static void addRow(int players, String court1, String court2, String court3, String court4, String court5, String court6, String court7) {
        Map<Integer, String> row = new HashMap<>();
        row.put(1, court1);
        row.put(2, court2);
        row.put(3, court3);
        row.put(4, court4);
        row.put(5, court5);
        row.put(6, court6);
        row.put(7, court7);
        DIVISION_TABLE.put(players, row);
    }

    public static void main(String[] args) {
        int numberOfPlayers = 9; // מספר השחקנים (ניתן לשנות)
        int numberOfCourts = 3; // מספר המגרשים (ניתן לשנות)

        // קבלת החלוקה מהטבלה
        String division = getDivision(numberOfPlayers, numberOfCourts);
        if (division != null) {
            System.out.println("מספר שחקנים: " + numberOfPlayers);
            System.out.println("מספר מגרשים: " + numberOfCourts);
            System.out.println("חלוקה: " + division);
        } else {
            System.out.println("לא נמצאה חלוקה מתאימה עבור " + numberOfPlayers + " שחקנים ו-" + numberOfCourts + " מגרשים.");
        }
    }

    public static String getDivision(int numberOfPlayers, int numberOfCourts) {
        // בדיקה אם מספר השחקנים קיים בטבלה
        if (!DIVISION_TABLE.containsKey(numberOfPlayers)) {
            System.out.println("לא נמצאה שורה עבור " + numberOfPlayers + " שחקנים.");
            return null;
        }

        // קבלת השורה המתאימה ממספר השחקנים
        Map<Integer, String> row = DIVISION_TABLE.get(numberOfPlayers);

        // בדיקה אם מספר המגרשים קיים בשורה
        if (!row.containsKey(numberOfCourts)) {
            System.out.println("לא נמצאה חלוקה עבור " + numberOfCourts + " מגרשים עבור " + numberOfPlayers + " שחקנים.");
            return null;
        }

        // החזרת החלוקה המתאימה
        return row.get(numberOfCourts);
    }
}